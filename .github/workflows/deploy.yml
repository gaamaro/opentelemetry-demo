name: Deploy to EC2

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      reason:
        description: 'Motivo do deploy manual'
        required: true
        type: string

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install make
        run: |
          sudo apt-get update && sudo apt-get install make

      - name: Get Secrets from Vault
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          # Testar conexão com Vault
          echo "🔍 Testando conexão com Vault..."
          curl -s -k ${VAULT_ADDR}/v1/sys/health || (echo "❌ Não foi possível conectar ao Vault" && exit 1)
          
          echo "📦 Obtendo secrets do Vault..."
          # Obter IP da EC2
          RAW_IP=$(curl -s -k -H "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/kv/data/ec2-ip | jq -r '.data.data.ip')
          EC2_IP=$(echo "$RAW_IP" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          
          # Validar IP
          if [[ ! $EC2_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ IP inválido encontrado: $EC2_IP"
            exit 1
          fi
          echo "✅ IP da EC2 encontrado: $EC2_IP"
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          
          # Obter chave SSH
          echo "🔑 Obtendo chave SSH do Vault..."
          curl -s -k -H "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/kv/data/ssh-default | jq -r '.data.data.private_key' > private_key.pem
          chmod 600 private_key.pem
          echo "PRIVATE_KEY_PATH=$PWD/private_key.pem" >> $GITHUB_ENV
          
          # Obter credenciais Dynatrace
          DT_ENDPOINT=$(curl -s -k -H "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/kv/data/dynatrace | jq -r '.data.data.env')
          DT_API_TOKEN=$(curl -s -k -H "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/kv/data/dynatrace | jq -r '.data.data.otel_token')
          
          # Criar arquivo de variáveis do Dynatrace
          echo "DT_ENDPOINT=$DT_ENDPOINT" > dynatrace.env
          echo "DT_API_TOKEN=$DT_API_TOKEN" >> dynatrace.env

      - name: Setup and Test SSH Connection
        run: |
          echo "🔍 Verificando chave SSH..."
          ls -la ${{ env.PRIVATE_KEY_PATH }}
          echo "Primeiras linhas da chave:"
          head -n 2 ${{ env.PRIVATE_KEY_PATH }}
          
          echo "🔧 Configurando SSH..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "Host ec2
            HostName ${{ env.EC2_IP }}
            User ubuntu
            IdentityFile ${{ env.PRIVATE_KEY_PATH }}
            StrictHostKeyChecking no" > ~/.ssh/config
          
          echo "📄 Configuração SSH:"
          cat ~/.ssh/config
          
          echo "🔌 Testando conexão SSH com debug..."
          ssh -vvv ec2 'echo "Conexão SSH bem sucedida!"' || (echo "❌ Erro na conexão SSH" && exit 1)

      - name: Prepare EC2
        run: |
          echo "🔧 Preparando ambiente na EC2..."
          ssh ec2 'sudo mkdir -p /repo && sudo chown ubuntu:ubuntu /repo'
          ssh ec2 'cd /repo && git clone https://github.com/gaamaro/opentelemetry-demo.git || (cd opentelemetry-demo && git pull)'
          
          echo "📝 Copiando arquivo de configuração do Dynatrace..."
          scp dynatrace.env ec2:/repo/opentelemetry-demo/

      - name: Deploy to EC2
        run: |
          cd startup
          make deploy-all

      - name: Log Deploy Info
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Deploy manual executado"
          echo "Ambiente: ${{ github.event.inputs.environment }}"
          echo "Motivo: ${{ github.event.inputs.reason }}" 